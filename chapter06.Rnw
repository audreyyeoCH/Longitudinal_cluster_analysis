% LaTeX file for Chapter 05
<<'preamble05',include=FALSE>>=
library(knitr)
library(lme4)
library(ggplot2)
library(psycho)
library(lmerTest)
library(ggmosaic)
library(janitor)
library(cowplot)
load("../Data/df.Rda")
load("../Data/df_longdf.Rda")
load("../Data/dflm.Rda")

opts_chunk$set(
    fig.path='figure/ch05_fig',
    self.contained=FALSE,
    cache=TRUE
)
options(knitr.table.format = "latex")
# knitr::opts_chunk$set(fig.pos = "!H", out.extra = "")
options(width = 60)
@

\vfill 
\chapter{Appendix}

\section{Descriptive statistics}
\vspace{0mm}
\begin{table}[h]
\caption{Breeds of does per barn and their percentages across all areas. These are counts across all time points.\label{hybridvisit}}
\centering
\begin{longtable}{c|c|c}
\hline
Area & $n$ & percent\\
\hline
Barn 1 & 871 & 0.33\\
\hline
Barn 2 & 442 & 0.17\\
\hline
Barn 3 & 428 & 0.16\\
\hline
Barn 4 & 871 & 0.33\\
\hline
\end{longtable}
% \begin{tabular}{c|c|c}
% \hline
%   & n & percent\\
% \hline
% Barn 1 & 871 & 0.33\\
% \hline
% Barn 2 & 442 & 0.17\\
% \hline
% Barn 3 & 428 & 0.16\\
% \hline
% Barn 4 & 871 & 0.33\\
% \hline
% \end{tabular}
<<pencount, results='asis', results='asis', warning=FALSE, message=FALSE, error=FALSE, echo=FALSE, eval = TRUE, fig.align= "centre",  fig.width=5, fig.height=4>>=
# tabyl(df$Area) %>%
# 	adorn_rounding(2) -> Area
# rownames(Area) = c("Barn 1", "Barn 2", "Barn 3", "Barn 4")
# knitr::kable(Area, row.names = FALSE, format = "latex", longtable = TRUE, align = "c")
@
\end{table}

\vspace{0mm}

\begin{table}[h]
\centering
\caption{Breeds of does per barn for each barn. Hycole is represented across al barns. Hyla is only found in Barn 1 and Hylamax is disproportionately represented in barn 1 to 3. \label{hybridarea}}
\centering
% \begin{tabular}{c|c|c|c|c}
% \hline
%   & Barn 1 & Barn 2 & Barn 3 & Barn 4\\
% \hline
% Hycole & 5 & 436 & 386 & 871\\
% \hline
% Hyla & 798 & 0 & 0 & 0\\
% \hline
% Hylamax & 68 & 6 & 42 & 0\\
% \hline
% \end{tabular}
\begin{longtable}{l|c|c|c|c}
\hline
  & Barn 1 & Barn 2 & Barn 3 & Barn 4\\
\hline
Hycole & 5 & 436 & 386 & 871\\
\hline
Hyla & 798 & 0 & 0 & 0\\
\hline
Hylamax & 68 & 6 & 42 & 0\\
\hline
\end{longtable}
<<hybridvisit, results='asis', warning=FALSE, message=FALSE, error=FALSE, echo=FALSE, eval = TRUE, fig.align= "centre",  fig.width=5, fig.height=4>>=
# hybridarea = table(df$Hybrid, df$Area)
# knitr::kable(hybridarea, format = "latex", align = "center", longtable = TRUE)
@
\end{table}
\begin{figure}[h]
\centering
<<trendpaw, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = FALSE, size = "tiny">>=
cor.test(df$meanPDheel, df$meanPDmid, method = "kendall", na.rm = TRUE)
@
\caption{(Naive)Assumption check of trend of mean mid-paw and heel score with summary statistics. Observations are naively assumed to be independant, only the association between the two scores are assessed here.}\label{trendpaw}
\end{figure}

\clearpage
\begin{figure}
\centering
<<kmlclean2, results='asis', results='asis', warning=FALSE, message=FALSE, error=FALSE, echo=FALSE, eval = TRUE, fig.align= "centre",  fig.width=6, fig.height=3>>=
 # cluster
ggplot(na.omit(df_longdf)) + # show case
  geom_mosaic(aes(x = product(visit),
  								fill = CleanFL, conds = product(kmlclusters2))) +
		theme_gray() +
	scale_fill_brewer(palette = "Set1") +
	labs(x = "Partitions", y = "Visit") +
	theme(legend.position = "bottom", 
				axis.text.x = element_blank(),
				legend.title = element_text(size = 8)) -> cleankmlclusters2

ggplot(na.omit(df_longdf)) + # show case
  geom_mosaic(aes(x = product(visit),
  								fill = CleanFL, conds = product(kmlclusters4))) +
	theme_gray() +
	scale_fill_brewer(palette = "Set1") +
	labs(x = "Partitions", y = "Visit") +
	theme(legend.position = "bottom", 
				axis.text.x = element_blank(),
				legend.title = element_text(size = 8)) -> cleankmlclusters4

plot_grid( cleankmlclusters2, cleankmlclusters4,
  align="h")
				# legend.title = element_text(size = 8),
				# legend.text = element_text(size = 8),
				# plot.title = element_text(size = 12),
				# axis.title = element_text(size = 10),
				# axis.text.x = element_blank(),
				# axis.text.y = element_text(size = 8))
@
\caption{CleanFL represents the ordinal variable of cleanliness of front left paw of the doe. The y-axis represents each visit in descending order from top to bottom. On the x-axis from left to right, represents two partitions of the \texttt{kml} implementation. The height of each rectangle and y-axes represent the proportion of does in that specific visit or time point. The width of the x-axis represent the proportion of a particular ordinal category it represents. Barn 1 and barn 2 is left and right respectively.}\label{kmlclean2}
\end{figure}
\begin{figure}
\centering
<<kmlclean3, results='asis', results='asis', warning=FALSE, message=FALSE, error=FALSE, echo=FALSE, eval = TRUE, fig.align= "centre",  fig.width=6, fig.height=3>>=
 # cluster
ggplot(na.omit(df_longdf)) + # show case
  geom_mosaic(aes(x = product(visit),
  								fill = CleanHL, conds = product(kmlclusters2))) +
		theme_gray() +
	scale_fill_brewer(palette = "Set1") +
	labs(x = "Partitions", y = "Visit") +
	theme(legend.position = "bottom", 
				axis.text.x = element_blank(),
				legend.title = element_text(size = 8)) -> cleankmlclusters2

ggplot(na.omit(df_longdf)) + # show case
  geom_mosaic(aes(x = product(visit),
  								fill = CleanHL, conds = product(kmlclusters4))) +
	theme_gray() +
	scale_fill_brewer(palette = "Set1") +
	labs(x = "Partitions", y = "Visit") +
	theme(legend.position = "bottom", 
				axis.text.x = element_blank(),
				legend.title = element_text(size = 8)) -> cleankmlclusters4

plot_grid( cleankmlclusters2, cleankmlclusters4,
  align="h")
				# legend.title = element_text(size = 8),
				# legend.text = element_text(size = 8),
				# plot.title = element_text(size = 12),
				# axis.title = element_text(size = 10),
				# axis.text.x = element_blank(),
				# axis.text.y = element_text(size = 8))
@
\caption{CleanHL represents the ordinal variable of cleanliness of front left paw of the doe. The y-axis represents each visit in descending order from top to bottom. On the x-axis from left to right, represents two partitions of the \texttt{kml} implementation. The height of each rectangle and y-axes represent the proportion of does in that specific visit or time point. The width of the x-axis represent the proportion of a particular ordinal category it represents. Barn 1 and barn 2 is left and right respectively.}\label{kmlclean3}
\end{figure}
% \section{Model assumptions}
% 
% \subsection{Mean heel and mid-paw scores}

\begin{figure}[h]
\centering
<<lmpaw, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = FALSE, size = "tiny">>=
trendpaw2 = lm(meanPDmid~meanPDheel, data = df)
summary(trendpaw2)
@
\caption{(Naive)Assumption check of trend of mean mid-paw and heel score with summary statistics. Observations are naively assumed to be independant, only the association between the two scores are assessed here.}\label{trendpaw3}
\end{figure}
%%%%%%%%%%%%%%%%%%%%%%%%% fig.pos=!H, out.width="" %%%%%%%%%%%%%%%%%
\begin{figure}[h]
\centering
<<trendpaw3, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = FALSE, size = "tiny">>=
par(mfrow = c(2,2))
plot(trendpaw2) 
@
\caption{(Naive) Assumption check of trend of mean mid-paw and heel score with summary statistics. Observations are naively assumed to be independant, only the association between the two scores are assessed here.}\label{trendpaw3}
\end{figure}

% \begin{figure}[H]
% \centering
% <<linmod, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
% dflmmod <- lm(meanPDheel ~ Age + Weight + Temperature + RelativeHumidity, data = dflm)
% summary(dflmmod)
% @
% \caption{Linear regression model for naive analysis under assumption of independance of covariates. Observations are naively assumed to be independant, only the association between the these variables are assessed here.}\label{linmod}
% \end{figure}

% \begin{figure}[H]
% \centering
% <<linmod2, include=FALSE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE>>=
% par(mfrow = c(2,2))
% plot(dflmmod)
% # dflm.aic <- step( dflmmod)
% # plot(dflmmod$residuals, dflm.aic$residuals) # good they follow an increasing trend
% # plot(dflm$visit, dflm$meanPDheel)
% @
% \caption{Linear regression plots for naive analysis under assumption of independance of covariates. Observations are naively assumed to be independant, only the a residual analysis is important here. The random residual indicates normality assumption of mean scores per time point (visit). }\label{linmod2}
% \end{figure}

\newpage
\pagebreak

% \section{Exploratory analysis for partitioned dataset}
% \subsection{Generalised linear regression}

\begin{figure}[h]
\centering
<<kml2glm, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mod = summary(glm(kmlclusters2 ~ Claws + Hybrid + CleanFL + MoistFL + meanPDheel.x, data = df_longdf, family = "binomial"))
mod$coefficients
@
\caption{Generalized linear regression output of two partition setting to show that two partitions have evidence of significant difference between come covariates and their levels. }\label{kml2glm}
\end{figure}


\begin{figure}[h]
\centering
<<kml4glm, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mod = summary(glm(kmlclusters4 ~ Claws + Hybrid + CleanFL + MoistFL + meanPDheel.x, data = df_longdf, family = "binomial"))
mod$coefficients
@
\caption{Generalized linear regression output of four partition setting to show that four partitions have evidence of significant difference between come covariates and their levels}\label{kml4glm}
\end{figure}

\begin{figure}[h]
\centering
<<kml2lmer, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters2 %in% c("A", "B"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of two partition setting to show that visit has an evidence of significant impact to mean pododermatitis scores.}\label{kml2lmer}
\end{figure}

\begin{figure}[h]
\centering
<<kml2A, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters2 %in% c("A"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of partition A in two partition case.}\label{kml2A}
\end{figure}

\begin{figure}[h]
\centering
<<kml2B, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters2 %in% c( "B"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of partition B in two partition case.}\label{kml2B}
\end{figure}

\begin{figure}[h]
\centering
<<kml4lmer, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters4 %in% c("A", "B", "C", "D"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of four partition setting to show that visit has an evidence of significant impact to mean pododermatitis scores.}\label{kml4glm}
\end{figure}


\begin{figure}[h]
\centering
<<kml4A, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters4 %in% c("A"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of partition A in two partition case.}\label{kml4A}
\end{figure}

\begin{figure}[h]
\centering
<<kml4B, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters4 %in% c("B"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of partition B in two partition case.}\label{kml4B}
\end{figure}

\begin{figure}[h]
\centering
<<kml4C, include=TRUE, error=FALSE, message=FALSE, warning=FALSE, eval = TRUE, echo = TRUE, size = "tiny">>=
mixed1 <- summary(firstmixedmod <- 
                    lmer(meanPDheel.y ~ as.numeric(visit) + Claws + Weight + 
                           Age + Temperature + RelativeHumidity + (1|EarTag) + 
                           Hybrid + (1|Area) + (Age|EarTag) + (Weight|EarTag), 
                         data = df_longdf[df_longdf$kmlclusters4 %in% c("C"),])) 
mixed1$coefficients
@
\caption{Linear mixed model output of partition C in two partition case.}\label{kml4C}
\end{figure}

\clearpage
\section{R code}

\setkeys{Gin}{width = 0.6\textwidth}
<<Rcode1, echo = TRUE, eval=FALSE, self.contained = TRUE, size = "tiny">>=
load("../Data/data.Rdat")
# changes will be made to GK's file and saved as "df.Rda"
# the following code will save it with changes for analysis.
# loading packages
df$WAPP_cont <- as.numeric(df$WAPP_cont)
df$Area <- NA
df$Area <- ifelse(df$Barn == "1" & df$Farm == "11", "Barn1",
                  ifelse(df$Barn == "1" & df$Farm == "13", "Barn2",
                         ifelse(df$Barn == "2" & df$Farm == "13", "Barn3",
                                ifelse(df$Barn == "1" & 
                                			 	df$Farm == "17", "Barn4", NA)) ))
df$Area = factor(df$Area)
######## var matching #####
df$EarTag <- as.numeric(df$EarTag)
which(df$EarTag[df$Area == "Barn1"] %in% df$EarTag[df$Area == "Barn2"])
#[1] 526 540 607 674 741 808 to rename as they are duplications
#none:
which(df$EarTag[df$Area == "Barn1"] %in% df$EarTag[df$Area == "Barn3"])
which(df$EarTag[df$Area == "Barn1"] %in% df$EarTag[df$Area == "Barn4"])
which(df$EarTag[df$Area == "Barn2"] %in% df$EarTag[df$Area == "Barn3"])
which(df$EarTag[df$Area == "Barn2"] %in% df$EarTag[df$Area == "Barn4"])
which(df$EarTag[df$Area == "Barn3"] %in% df$EarTag[df$Area == "Barn4"])

sort(unique(df$EarTag[df$Area == "Barn1"]))
sort(unique(df$EarTag[df$Area == "Barn2"]))
sort(unique(df$EarTag[df$Area == "Barn3"]))
sort(unique(df$EarTag[df$Area == "Barn4"]))

# sort
sort(unique(df$EarTag))
# EarTag 1 to 6 are available labels to reassign to

# Reassign duplicate to new labels
"1" -> df$EarTag[df$Area == "Barn1" & df$EarTag == "526"]
"2" -> df$EarTag[df$Area == "Barn1" & df$EarTag == "540"]
"3" -> df$EarTag[df$Area == "Barn1" & df$EarTag == "607"]
"4" -> df$EarTag[df$Area == "Barn1" & df$EarTag == "674"]
"5" -> df$EarTag[df$Area == "Barn1" & df$EarTag == "741"]
"6" -> df$EarTag[df$Area == "Barn1" & df$EarTag == "808"]

#check
which(df$EarTag[df$Area == "Barn1"] %in% df$EarTag[df$Area == "Barn3"]) 

df[df$EarTag == "1",]
df[df$EarTag == "2",]

######## remove missing values #####
dim(df)
df <- df[!df$EarTag == "11353",]
######## var meanPDheel : Mean scores from L and R limbs 
df$meanPDheel <- rowMeans(df[c('PDHLH', 'PDHRH')], na.rm=TRUE)
df$meanPDmid <- rowMeans(df[c('PDHLM', 'PDHRM')], na.rm=TRUE)
df$Hybrid[df$Hybrid == "F1"] <- "Hylamax"
######## var Claw length #####
#recoding Claw length:
df$Claws[df$Claws=="1 torn out HR, rest normal"]<-"normal"
df$Claws[df$Claws=="1 torn out HR, rest too long"]<-"too long"
df$Claws[df$Claws=="1 torn out VL, rest normal"]<-"normal"
df$Claws[df$Claws=="mormal"]<-"normal"
df$Claws[df$Claws=="normal & torn out 1xvl"]<-"normal"
df$Claws[df$Claws=="too lang"]<-"too long"
df$Claws[df$Claws=="too long, one torn out HL"]<-"too long"
df$Claws[df$Claws=="too long, one torn out HR"]<-"too long"
df$Claws[df$Claws=="torn out (2xhl)/too long"]<-"too long"
df$ReproductiveState[df$ReproductiveState=="only-lacting"]<-
	"only-lactating"
######## var mmyy #####
df$mmyy[df$visit == "1"] <- "July2016"
df$mmyy[df$visit == "2"] <- "August2016"
df$mmyy[df$visit == "3"] <- "September2016"
df$mmyy[df$visit == "4"] <- "October2016"
df$mmyy[df$visit == "5"] <- "November2016"
df$mmyy[df$visit == "6"] <- "December2016"
df$mmyy[df$visit == "7"] <- "January2017"
df$mmyy[df$visit == "8"] <- "February2017"
df$mmyy[df$visit == "9"] <- "March2017"
df$mmyy[df$visit == "10"] <- "April2017"
df$mmyy[df$visit == "11"] <- "May2017"
df$mmyy[df$visit == "12"] <- "June2017"
df$mmyy[df$visit == "13"] <- "endJune2017"
df$mmyy <- factor(df$mmyy,
      levels = c("July2016", "August2016", "September2016", "October2016",
      "November2016", "December2016", "January2017", 
        "February2017", "March2017","April2017", 
      "May2017", "June2017", "endJune2017"), 
ordered = TRUE)
df$visit <- factor(df$visit, levels = c("1", "2", "3", "4", 
				"5", "6", "7", "8",
        "9", "10", "11", "12", 
				"13"), ordered = TRUE)
######## var cat #####
df$cat <- NA
df$cat <- ifelse(df$Area == "Barn1", "A",
                 ifelse(df$Area == "Barn2", "B",
                        ifelse(df$Area == "Barn3", "C",
                               ifelse(df$Area == "Barn4", "D", NA)) ))
######## var MdAge, MdWeight, mdScore, (MEDIANS) #####
df %>%
	group_by(visit, cat) %>%
	mutate(mdAge = median(Age)) -> df
df %>%
	group_by(visit, cat) %>%
	mutate(mdWeight = median(Weight)) -> df
df %>%
	group_by(visit, cat) %>%
	mutate(mdScore = median(meanPDheel)) -> df
######## var Clean #####
df$CleanFR <- factor(df$CleanFR, levels = 
										 	c("clean", "dirty", "very dirty"), 
										 ordered = TRUE )
df$CleanFL <- factor(df$CleanFR, levels = 
										 	c("clean", "dirty", "very dirty"), 
										 ordered = TRUE )
df$CleanHL <- factor(df$CleanFR, levels = 
										 	c("clean", "dirty", "very dirty"), 
										 ordered = TRUE )
df$CleanHR <- factor(df$CleanFR, levels = 
										 	c("clean", "dirty", "very dirty"), 
										 ordered = TRUE )
# save
save(df, file = "../Data/df.Rda")
@

\setkeys{Gin}{width = 0.6\textwidth}
<<Rcode2, echo = TRUE, eval = FALSE, self.contained = TRUE, size = "tiny">>=
load("../Data/df.Rda")
library(kml)
library(tidyverse)
library(ggplot2)
library(janitor)
dev.off()
######## Cld object needed for kml #####
shortdf <- df[, c(3, 40, 37, 38, 41)]
#str(shortdf)
spread(shortdf, mmyy, meanPDheel) -> widedf0
#spread(df, mmyy, meanPDheel) -> testwide
head(widedf0)
sum(is.na(widedf0))
#class(widedf0)
#names(widedf0) #is data.frame
widedf1 <- as.matrix(widedf0[, 4:16])
#class(widedf1)
#head(widedf1)
sum(is.nan(widedf1))
widedf1[is.nan(widedf1)] <- NA
widedf1 <- imputation(widedf1, "trajMean")
# I do not think its appropriate to impute actually
# head(widedf1)
# colnames(widedf1)
sum(is.na(widedf1)) # 13
class(widedf1)
# create cld for matrix object pour widedf1 which has been imputated
mycld <- clusterLongData(widedf1, timeInData = 1:13)
#this likes matrices, the vignette said both
save(mycld, file = "../Data/cldSDQ.Rdata")

######### nbCluster = 2 #####
# slow kml not needed
# kml(mycld, toPlot = "both") # runs well, straight from the paper
#choice(mycld)
#plotAllCriterion(mycld) # works # show case
# from now on we use fast kml,
kml(mycld, nbClusters = 2, parAlgo = parALGO(distance = function(x, y)
  +    cor(x, y), saveFreq = 10)) #fastkml

choice(mycld)
plotAllCriterion(mycld) # works # show case

######## nbCluster = 4 #####
#kml(mycld, nbClusters = 4, toPlot = "both")  # slow kml
kml(mycld, nbClusters = 4, parAlgo = parALGO(distance = function(x, y)
  +    cor(x, y), saveFreq = 10)) #fastkml
choice(mycld)
plotAllCriterion(mycld)

######## df = df_longdf : creating df for nbClusters = 2 clusters 
str(widedf1)
widedf1 <- as.data.frame(widedf1)
#widedf1$cluster <- widedf0$cluster
widedf1$EarTag <- widedf0$EarTag
widedf1$Area <- widedf0$Area
widedf1$kmlclusters2 <- getClusters(mycld, 2,
                                    asInteger = FALSE)

######## creating df for nbClusters = 4 clusters #####
widedf1$kmlclusters4 <- getClusters(mycld, 4,
                                    asInteger = FALSE)
save(widedf1, file = "../Data/widedf1.Rda")

######## Long form df from kml partitions: for glm and lmer models #####
#df_long <- gather(widedf0, "mmyy",
# "meanPDheel", -EarTag, -Area, -cluster, -kmlclusters2, -kmlclusters4)
gather(widedf1, mmyy, meanPDheel, -EarTag,
       -Area, -kmlclusters4, -kmlclusters2) -> testlong

testlong$mmyy <- factor(testlong$mmyy,
                        c("July2016", "August2016", 
                        	"September2016", "October2016",
                          "November2016", "December2016", 
                        	"January2017", "February2017",
                           "March2017", "April2017", 
                        	"May2017", "June2017", "endJune2017"),
                        ordered = TRUE)
names(testlong)
#df_longdf0 <- full_join(testlong, df, by = "EarTag")
df_longdf <- full_join(df, testlong, by =
                         c("EarTag" = "EarTag", "mmyy" = "mmyy", 
                         	"Area" = "Area"))

# first save but see second save below
save(df_longdf, file = "../Data/df_longdf.Rda")
# [1] "ID"                "Pen"
# [3] "EarTag"            "Hybrid"
# [5] "Age"               "NoKindlings"
# [7] "Weight"            "TimeD"
# [9] "CleanFR"           "CleanFL"
# [11] "CleanHR"           "CleanHL"
# [13] "MoistFR"           "MoistFL"
# [15] "MoistHR"           "MoistHL"
# [17] "PDFR"              "PDFL"
# [19] "PDHRM"             "PDHRH"
# [21] "PDHLM"             "PDHLH"
# [23] "Claws"             "WoundBite"
# [25] "WoundFeetHR"       "WoundFeetHL"
# [27] "RemarksDoe"        "visit"
# [29] "ID.Farm"           "Barn"
# [31] "Farm"              "ReproductiveState"
# [33] "WAPP"              "WAPP_cont"
# [35] "Temperature"       "RelativeHumidity"
# [37] "Area"              "meanPDheel.x"
# [39] "meanPDmid"         "mmyy"
# [41] "cat"               "mdAge"
# [43] "mdWeight"          "mdScore"
# [45] "kmlclusters2"      "kmlclusters4"
# [47] "meanPDheel.y"
# remove unimputated data
df_longdf <- df_longdf[, -c(38)]
names(df_longdf)
"meanPDheel" -> colnames(df_longdf)[47]
# final save for df_longdf
save(df_longdf, file = "../Data/df_longdf.Rdat")


######## concordance with areas and with each other #####
# 2 kml
df_longdf %>%
  tabyl(Area, kmlclusters2) %>%
  adorn_percentages() %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> area2kml
save(area2kml, file = "../Data/area2kml.Rda")
# 4 kml
df_longdf %>%
  tabyl(Area, kmlclusters4)  %>%
  adorn_percentages() %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame()  -> area4kml
save(area4kml, file = "../Data/area4kml.Rda")

# concordance of 2kml vs 4kml

df_longdf %>%
  tabyl(kmlclusters2, kmlclusters4) %>%
  adorn_percentages() %>%
  adorn_rounding(2) %>%
  as.data.frame()  -> conkml

colnames(conkml) <- c( " ", "A", "B", "C", "D")
save(conkml, file = "../Data/conkml.Rda")

######## sample size per cluster #####
# load("../Data/df_longdf.Rda")
df_longdf %>%
  tabyl(kmlclusters2) %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> twokmlcounts
colnames(twokmlcounts) <- c("kml clusters", "n", "(%)")
save(twokmlcounts, file = "../Data/twokmlcounts.Rda")
df_longdf %>%
  tabyl(kmlclusters4) %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> fourkmlcounts
colnames(fourkmlcounts) <- c("kml clusters", "n", "(%)")
save(fourkmlcounts, file = "../Data/fourkmlcounts.Rda")
###### score vs kml

a = paste( "A", " (", fourkmlcounts$n[1], ")", sep = "")
b = paste( "B", " (", fourkmlcounts$n[2], ")", sep = "")
c = paste( "C", " (", fourkmlcounts$n[3], ")", sep = "")
d = paste( "D", " (", fourkmlcounts$n[4], ")", sep = "")
ggplot(df_longdf,
       aes(x = visit, y = meanPDheel.y,
           colour = kmlclusters4, group = kmlclusters4)) +
  geom_smooth(method = "loess") +
  scale_colour_discrete(name = "Four kml\npartitians (n)",
                        labels=c(a, b, c, d)) +
  labs(x = "Visit", y = "Score") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 12)) +
  expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_x_discrete(name = "Visit", 
  								 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

load("../Data/twokmlcounts.Rda")
a = paste( "A", " (", twokmlcounts$n[1], ")", sep = "")
b = paste( "B", " (", twokmlcounts$n[2], ")", sep = "")
ggplot(df_longdf,
       aes(x = visit, y = meanPDheel.y, 
       		colour = kmlclusters2, group = kmlclusters2)) +
  geom_smooth(method = "loess") +
  labs(x = "Visit", y = "Score") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 12)) +
          expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_colour_discrete(name = "Two kml\npartitians (n)",
                        labels=c(a, b)) +
  scale_x_discrete(name = "Visit", 
  								 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))



####### Descriptive stats tables #####
# mean score
# kmlclusters2
load("../Data/df_longdf.Rda")
mean(df_longdf[df_longdf$kmlclusters2 == "B",]$meanPDheel.y, na.rm = TRUE)
mean(df_longdf[df_longdf$kmlclusters2 == "A",]$meanPDheel.y, na.rm = TRUE)

#kmlclusters4
mean(df_longdf[df_longdf$kmlclusters4 == "A",]$meanPDheel.y, na.rm = TRUE)
sd(df_longdf[df_longdf$kmlclusters4 == "A",]$meanPDheel.y, na.rm = TRUE)
mean(df_longdf[df_longdf$kmlclusters4 == "B",]$meanPDheel.y, na.rm = TRUE)
mean(df_longdf[df_longdf$kmlclusters4 == "C",]$meanPDheel.y, na.rm = TRUE)
mean(df_longdf[df_longdf$kmlclusters4 == "D",]$meanPDheel.y, na.rm = TRUE)

# table for score
l = sprintf("%.1f (%.1f)",
            mean(df_longdf[df_longdf$kmlclusters2 == "A",]$meanPDheel.y, 
            		 na.rm = TRUE),
            sd(df_longdf[df_longdf$kmlclusters2 == "A",]$meanPDheel.y, 
            	 na.rm = TRUE))
m = sprintf("%.1f (%.1f)",
            mean(df_longdf[df_longdf$kmlclusters2 == "B",]$meanPDheel.y, 
            		 na.rm = TRUE),
            sd(df_longdf[df_longdf$kmlclusters2 == "B",]$meanPDheel.y, 
            	 na.rm = TRUE))

n = sprintf("%.1f (%.1f)",
            mean(df_longdf[df_longdf$kmlclusters4 == "A",]$meanPDheel.y, 
            		 na.rm = TRUE),
            sd(df_longdf[df_longdf$kmlclusters4 == "A",]$meanPDheel.y, 
            	 na.rm = TRUE))
p = sprintf("%.1f (%.1f)",
            mean(df_longdf[df_longdf$kmlclusters4 == "B",]$meanPDheel.y, 
            		 na.rm = TRUE),
            sd(df_longdf[df_longdf$kmlclusters4 == "B",]$meanPDheel.y, 
            	 na.rm = TRUE))
q = sprintf("%.1f (%.1f)",
            mean(df_longdf[df_longdf$kmlclusters4 == "C",]$meanPDheel.y, 
            		 na.rm = TRUE),
            sd(df_longdf[df_longdf$kmlclusters4 == "C",]$meanPDheel.y, 
            	 na.rm = TRUE))
r = sprintf("%.1f (%.1f)",
            mean(df_longdf[df_longdf$kmlclusters4 == "D",]$meanPDheel.y, 
            		 na.rm = TRUE),
            sd(df_longdf[df_longdf$kmlclusters4 == "D",]$meanPDheel.y, 
            	 na.rm = TRUE))
s = c("A of 4 partitions", "B of 4 partitions", "C of 4 partitions", 
			"D of 4 partitions",
      "A of 2 partitions", "B of two partitions" )
s = factor(s, level = c("A of 4 partitions", "B of 4 partitions", 
												"C of 4 partitions",
                        "D of 4 partitions", "A of 2 partitions", 
												"B of two partitions" ),
           ordered = TRUE)
idx = c(1, 3, 2, 4) # sorting as in publication
tab_kmlarea = array(NA, dim=c(3,6))
#df$Area = factor(df$Area)
rownames(tab_kmlarea) = c("  Partitions", "  n", " Mean (SD)")
tab_kmlarea
tab_kmlarea[1,] = s
tab_kmlarea[2,] = c(dim(df_longdf[df_longdf$kmlclusters4 == "A",])[1],
                    dim(df_longdf[df_longdf$kmlclusters4 == "B",])[1],
                    dim(df_longdf[df_longdf$kmlclusters4 == "C",])[1],
                    dim(df_longdf[df_longdf$kmlclusters4 == "D",])[1],
                    dim(df_longdf[df_longdf$kmlclusters2 == "A",])[1],
                    dim(df_longdf[df_longdf$kmlclusters2 == "B",])[1])
tab_kmlarea[1,] = c("A of 4 partitions", "B of 4 partitions",
                    "C of 4 partitions", "D of 4 partitions",
                    "A of 2 partitions", "B of 2 partitions" )
tab_kmlarea[3,] = c(l, m, n, p , q, r)
tab_kmlarea <- as.data.frame(tab_kmlarea)
t(tab_kmlarea) -> kml24
kml24
save(kml24, file = "../Data/kml24.Rda")

######## kmlcluster4 #####

##### Claws
ggplot(df_longdf) +
  geom_mosaic(aes(x = product(Claws, visit),
                  fill = Claws , conds = product(kmlclusters2))) +
  theme_minimal() +
  labs(x = "Claw length:Partitian", y = "Visit") +
  scale_fill_brewer(palette = "Set2") +
  theme(
    legend.position = "bottom",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    plot.title = element_text(size = 12),
    axis.title = element_text(size = 10),
    axis.text.x.bottom = element_text(size = 6, angle = 90))

ggplot(df_longdf) +
  geom_mosaic(aes(x = product(Claws, visit),
                  fill = Claws , conds = product(kmlclusters4))) +
  theme_minimal() +
  labs(x = "Claw length:Partitian", y = "Visit") +
  scale_fill_brewer(palette = "Set2") +
  theme(
    legend.position = "bottom",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8),
    plot.title = element_text(size = 12),
    axis.title = element_text(size = 10),
    axis.text.x.bottom = element_text(size = 6, angle = 90))

##### weight

ggplot(df_longdf,
       aes(x = df_longdf$visit, y = df_longdf$Weight,
           colour = kmlclusters2, group = kmlclusters2)) + theme_gray() +
  geom_smooth(method = "loess") +
  labs(x = "Visit", y = "Weight") +
  scale_x_discrete(name = "Visit", 
  								 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  labs(colour = "Two Partitians") +
  expand_limits(x=c(1,13), y=c(4.5, 5.5)) +
  ylab("Weight (kg)") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 10))


ggplot(df_longdf,
       aes(x = df_longdf$visit, y = df_longdf$Weight,
           colour = kmlclusters4, group = kmlclusters4)) + theme_gray() +
  geom_smooth(method = "loess") +
  labs(x = "Visit", y = "Weight (kg)") +
  scale_x_discrete(name = "Visit", 
  								 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  labs(colour = "Four Partitians") +
  expand_limits(x=c(1,13), y=c(4.5, 6.5)) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 10))

###### age
ggplot(df_longdf, aes(x = df_longdf$visit,
                      y = df_longdf$Age, 
											colour = kmlclusters2, group = kmlclusters2)) +
  geom_smooth(method = "loess") +
  scale_x_discrete(name = "Visit", 
  								 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  labs(colour = "Two partitians") +
  expand_limits(x=c(1,13), y=c(10, 22.5)) +
  ylab("Age (months)") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 10))

ggplot(df_longdf, aes(x = df_longdf$visit,
                      y = df_longdf$Age, 
											colour = kmlclusters4, group = kmlclusters4)) +
  geom_smooth(method = "loess") +
  scale_x_discrete(name = "Visit", 
  								 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  labs(colour = "Two partitians") +
  expand_limits(x=c(1,13), y=c(10, 22.5)) +
  ylab("Age (months)") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 10))

###### temp
ggplot(df_longdf,
       aes(x = visit, y = Temperature,
           colour = kmlclusters2, group = kmlclusters2)) +
  geom_smooth(method = "loess") +
  labs(x = "visit", y = "Temperature") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  geom_text(aes(x = 7.5, y=18, label = "")) +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 12)) +
  expand_limits(x=c(1,13), y=c(10, 27)) +
  scale_x_discrete(name = "visit", limits =
                     factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  scale_colour_discrete(name = "Two partitions")

ggplot(df_longdf,
       aes(x = visit, y = Temperature,
           colour = kmlclusters4, group = kmlclusters4)) +
  geom_smooth(method = "loess") +
  labs(x = "visit", y = "Temperature") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  geom_text(aes(x = 7.5, y=18, label = "")) +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 12)) +
  expand_limits(x=c(1,13), y=c(10, 27)) +
  scale_x_discrete(name = "visit", limits =
                     factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  scale_colour_discrete(name = "Four partitions")


### rh
ggplot(df_longdf,
       aes(x = visit, y = RelativeHumidity, 
       		colour = kmlclusters2, group = kmlclusters2)) +
  geom_smooth(method = "loess") +
  theme_gray() +
  labs(x = "visit", y = "Relative humidity (%)") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 12)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  expand_limits(x=c(1,13), y=c(55, 72)) +
  scale_color_discrete(name = "Two partitians")

ggplot(df_longdf,
       aes(x = visit, y = RelativeHumidity, 
       		colour = kmlclusters4, group = kmlclusters4)) +
  geom_smooth(method = "loess") +
  labs(x = "visit", y = "relative humidity (%)") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 10),
        legend.text = element_text(size = 8),
        plot.title = element_text(size = 12),
        axis.title = element_text(size = 12)) +
  expand_limits(x=c(1,13), y=c(55, 70))  +
  labs(colour = "4 kml clusters") +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13))) +
  scale_color_discrete(name = "Four partitians")
######## kmlclusters2 #####
df_longdf %>%
  group_by(visit, kmlclusters2) %>%
  filter(kmlclusters2 == "A") %>%
  tabyl(visit, Claws) %>%
  adorn_percentages() %>%
  adorn_rounding(digits = 2) %>%
  mutate(kmlclusters2 = rep("A", 13)) -> kml2clawsA
df_longdf %>%
  group_by(visit, kmlclusters2) %>%
  filter(kmlclusters2 == "B") %>%
  tabyl(visit, Claws) %>%
  adorn_percentages() %>%
  adorn_rounding(digits = 2) %>%
  mutate(kmlclusters2 = rep("B", 13)) -> kml2clawsB

bind_rows(kml2clawsA, kml2clawsB) -> df_kml2claws
save(df_kml2claws, file = "../Data/df_kml2claws.Rda")

#concordance matrix of Farm area and kml clusters
load("../Data/df_longdf.Rda")

table(df_longdf$Area, df_longdf$kmlclusters4) -> area4kml

conareakml4 <- round(prop.table(area4kml, margin = 1),
                     digits = 2) # how much do they agree with uniqe Farms
save(con_areakml4, file = "../Data/con_areakml4.Rda")

areakml2 <- table(df_longdf$Area, df_longdf$kmlclusters2)
con_areakml2 <- round(prop.table(areakml2, margin = 1), digits = 2)
con_areakml2 <- con_areakml2[,-c(3)]
save(con_areakml2, file = "../Data/con_areakml2.Rda")


areakml4 <- table(df_longdf$Area, df_longdf$kmlclusters4)
con_areakml4 <- round(prop.table(areakml4, margin = 1), digits = 2)
save(con_areakml4, file = "../Data/con_areakml2.Rda")
#
###### Generalised linear models to compare kml partitions#####
kml2diff <- summary(glm(kmlclusters2 ~ Claws + Hybrid +
                          CleanFL + MoistFL +
         meanPDheel.x, data = df_longdf, family = "binomial"))
varkml2 <- kml2diff$coefficients

kml2difftab = data.frame(
  matrix(vector(), 3, 5,
         dimnames=list(c(), 
         		c("Variable", "Estimate", "Std. Error", "CI", "P value"))),
                         stringsAsFactors=F)
kml2difftab[,1] = c("Claws too long", "Hybrid : Hyla", "Mean heel scores")
kml2difftab[1,2] <- varkml2[2,1]
kml2difftab[2,2] <- varkml2[3,1]
kml2difftab[3,2] <- varkml2[9,1]
#Std error
kml2difftab[1,3] <- varkml2[2,2]
kml2difftab[2,3] <- varkml2[3,2]
kml2difftab[3,3] <- varkml2[9,2]
#CI
kml2difftab[1,4] <-  paste(
  varkml2[1,2] + 1.96*varkml2[2,2],
  varkml2[1,2] - 1.96*varkml2[2,2])
kml2difftab[2,4] <-  paste(
  varkml2[1,3] + 1.96*varkml2[3,2],
  varkml2[1,3] - 1.96*varkml2[3,2])
kml2difftab[3,4] <-  paste(
  varkml2[1,4] + 1.96*varkml2[9,2],
  varkml2[1,4] - 1.96*varkml2[9,2])
# P value
kml2difftab[1,5] <- paste("p", "0.0001", sep = "<")
kml2difftab[2,5] <- paste("p", "0.0001", sep = "<")
kml2difftab[3,5] <- paste("p", "0.0001", sep = "<")



save(kml2difftab, file = "../Data/kml2difftab.Rda")
@

\setkeys{Gin}{width = 0.6\textwidth}
<<Rcode 4, echo = TRUE, eval = FALSE, self.contained = TRUE, size = "tiny">>=

####### simulation on loss of data #####

set.seed(1989)
obs <- dim(df)[1]
percentloss <- c(0.01, 0.05, 0.10, 0.20)
sizeofloss <- round(obs*percentloss, 0)
sizeofloss

# remove "percentloss" % of random rows of data
onepercentloss <- sample(1:obs, sizeofloss[1], replace = FALSE)
fivepercentloss <- sample(1:obs, sizeofloss[2], replace = FALSE)
tenpercentloss <- sample(1:obs, sizeofloss[3], replace = FALSE)
twentypercentloss <- sample(1:obs, sizeofloss[4], replace = FALSE)
#class(onepercentloss)

# remove 1% of random rows
df_onepercentloss <- df[-onepercentloss,]
dim(df_onepercentloss) #2586 x 44, 1% of data loss

# remove 5% of random rows
df_fivepercentloss <- df[-fivepercentloss,]
#dim(df_fivepercentloss) #2481 x 44, 5% of data loss

# remove 10% of random rows
df_tenpercentloss <- df[-tenpercentloss,]
#dim(df_tenpercentloss) #2351 x 44, 10% of data loss

# remove 20% of random rows
df_twentypercentloss <- df[-twentypercentloss,]
#dim(df_twentypercentloss) #2091 x 44, 20% of data loss

####### Random losses of data (as stipulated above) #####

####### one percent loss kml and sample size #####
# first create wide form
df_onepercentloss0 <- df_onepercentloss[,c(3, 37,28, 41, 38)]
#sum(is.na(df_onepercentloss0)) # 12
#dim(df_onepercentloss0) #2586 x 5
df_onepercentloss0$visit <-
  factor(df_onepercentloss0$visit, levels = c("1", "2","3", "4","5", "6",
                                              "7", "8","9", "10",
                                              "11", "12","13"),
                                   order = TRUE)

df_onepercentloss_wide1 <-spread(df_onepercentloss0, visit, meanPDheel) 
onepercentloss_wide2 <- as.matrix(df_onepercentloss_wide1[,4:16])
#sum(is.na(onepercentloss_wide2)) # is 1898
#sum(is.nan(onepercentloss_wide2)) # is 12
is.nan(onepercentloss_wide2) -> "NA"
opkml <- imputation(as.matrix(
	df_onepercentloss_wide1[,4:16]), "trajMean")
#sum(is.na(opkml)) #0
save(opkml, file = "../Data/opkml.Rda")
opcld <- cld(traj = opkml, timeInData = 1:13)
save(opcld, file = "../Data/opcld.Rda")

# implement kml on 1 % loss
load("../Data/opcld.Rda")
#kml(opcld, 4, toPlot = "both") # slow kml
kml(opcld, nbClusters = 4, parAlgo = parALGO(distance = function(x, y)
  +    cor(x, y), saveFreq = 10)) # fast kml
opkml <- data.frame(opkml)
opkml$kmlclusters4op <- getClusters(opcld, 4, asInteger = FALSE)
#likes matrix class
#View(opkml)

op <- gather(opkml, visit, score, -kmlclusters4op)
1 -> op$visit[op$visit == "X1"]
2 -> op$visit[op$visit == "X2"]
3 -> op$visit[op$visit == "X3"]
4 -> op$visit[op$visit == "X4"]
5 -> op$visit[op$visit == "X5"]
6 -> op$visit[op$visit == "X6"]
7 -> op$visit[op$visit == "X7"]
8 -> op$visit[op$visit == "X8"]
9 -> op$visit[op$visit == "X9"]
10 -> op$visit[op$visit == "X10"]
11 -> op$visit[op$visit == "X11"]
12 -> op$visit[op$visit == "X12"]
13 -> op$visit[op$visit == "X13"]
op$visit <- factor(op$visit, 
			levels = c("1", "2", "3", "4", "5", "6", 
			"7", "8", "9", "10","11", "12","13"), 
			ordered = TRUE)
# save op df and create plot (for full data go to kml4score in ch03)
save(op, file = "../Data/op.Rda")

# sample size
# for zero percent loss see "sample size per cluster" in this file

op %>%
  tabyl(kmlclusters4op) %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> opkml4counts
colnames(opkml4counts) <- c("kml clusters", "n", "(%)")
save(opkml4counts, file = "../Data/opkml4counts.Rda")

a = paste( "A", " (", opkml4counts$n[1], ")", sep = "")
b = paste( "B", " (", opkml4counts$n[2], ")", sep = "")
c = paste( "C", " (", opkml4counts$n[3], ")", sep = "")
d = paste( "D", " (", opkml4counts$n[4], ")", sep = "")
ggplot(op, aes(x = visit, y = score, 
							 group = kmlclusters4op, colour = kmlclusters4op)) +
  geom_smooth(method = "loess") +
  scale_colour_discrete(name = "% loss (n)", breaks = c("A", "B", "C", "D"),
                    labels = c(a, b, c, d)) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted")  +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######### five percent loss kml #####
# first create wide form
df_fivepercentloss0 <- df_fivepercentloss[,c(3, 37,28, 41, 38)]
#df_fivepercentloss0 <- df_fivepercentloss[,c(3,40, 37,39, 41)]
#sum(is.na(df_fivepercentloss0)) #13
#dim(df_fivepercentloss0) #2481 x 5
df_fivepercentloss0$visit <- factor(df_fivepercentloss0$visit, 
											levels = c("1", "2","3", 
											"4","5", "6", "7", "8", "9", "10", 
											"11", "12","13"), ordered = TRUE)

df_fivepercentloss_wide1 <-spread(df_fivepercentloss0, visit, meanPDheel)
fivepercentloss_wide2 <- as.matrix(df_fivepercentloss_wide1[,4:16])
#sum(is.na(fivepercentloss_wide2)) # is 2016
#sum(is.nan(fivepercentloss_wide2)) #12
fpkml <- imputation(as.matrix(df_fivepercentloss_wide1[,4:16]), "trajMean")
#fpkml <- fpkml[-61, ]
# fpkml <- data.frame(fpkml) # at fpcld stage, idALL duplicated apparently
sum(is.na(fpkml)) #0
fpcld <- clusterLongData(traj = fpkml, timeInData = 1:13)
save(fpcld, file = "../Data/fpcld.Rda")
#kml(fpcld, 4, toPlot = "both") # slow kml
kml(fpcld, nbClusters = 4, parAlgo = parALGO(distance = function(x, y) 
  +    cor(x, y), saveFreq = 10)) # fast kml
#onepercentloss_wide3 <- as.data.frame(onepercentloss_wide2[-61,])
dim(fpkml)
fpkml <- data.frame(fpkml)
fpkml$kmlclusters4fp <- getClusters(fpcld, nbCluster = 4, 
			asInteger = FALSE)

fp <- gather(fpkml, visit, score, -kmlclusters4fp)
1 -> fp$visit[fp$visit == "X1"]
2 -> fp$visit[fp$visit == "X2"]
3 -> fp$visit[fp$visit == "X3"]
4 -> fp$visit[fp$visit == "X4"]
5 -> fp$visit[fp$visit == "X5"]
6 -> fp$visit[fp$visit == "X6"]
7 -> fp$visit[fp$visit == "X7"]
8 -> fp$visit[fp$visit == "X8"]
9 -> fp$visit[fp$visit == "X9"]
10 -> fp$visit[fp$visit == "X10"]
11 -> fp$visit[fp$visit == "X11"]
12 -> fp$visit[fp$visit == "X12"]
13 -> fp$visit[fp$visit == "X13"]
fp$visit <- factor(fp$visit, levels = c("1", "2", "3", "4", 
								"5", "6", "7", "8",
    "9", "10","11", "12","13"), order = TRUE)
# save df
save(fp, file = "../Data/fp.Rda")

# sample size
fp %>%
  tabyl(kmlclusters4fp) %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> fpkml4counts
colnames(fpkml4counts) <- c("kml clusters", "n", "(%)")
save(fpkml4counts, file = "../Data/fpkml4counts.Rda")

# plot
a = paste( "A", " (", fpkml4counts$n[1], ")", sep = "")
b = paste( "B", " (", fpkml4counts$n[2], ")", sep = "")
c = paste( "C", " (", fpkml4counts$n[3], ")", sep = "")
d = paste( "D", " (", fpkml4counts$n[4], ")", sep = "")

ggplot(fp, aes(x = visit, y = score,
               group = kmlclusters4fp, colour = kmlclusters4fp)) +
  geom_smooth(method = "loess") +
  scale_colour_discrete(name = "% loss (n)", breaks = c("A", "B", "C", "D"),
                        labels=c(a, b, c, d)) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######## ten percent loss kml #####
# ten create wide form
#scene 1 use visit as factor for ten percent loss
df_tenpercentloss0 <- df_tenpercentloss[,c(3, 37,28, 41, 38)]
#sum(is.na(df_tenpercentloss0)) #9
#dim(df_tenpercentloss0) #2351 x 5
df_tenpercentloss0$visit <-
  factor(df_tenpercentloss0$visit, levels = c("1", "2","3",
                                    "4", "5", "6", "7", "8","9", "10",
                                      "11", "12","13"),
                                    order = TRUE)

df_tenpercentloss_wide1 <-spread(df_tenpercentloss0, visit, meanPDheel)
tenpercentloss_wide2 <- as.matrix(df_tenpercentloss_wide1[,4:16])
#sum(is.na(tenpercentloss_wide2)) # is 2104
#sum(is.nan(tenpercentloss_wide2)) # is 9
tpkml <- imputation(as.matrix(df_tenpercentloss_wide1[,4:16]), "trajMean")
#tpkml <- tpkml[-61, ]
#tpkml <- data.frame(tpkml) # at fpcld stage, idALL duplicated apparently
#sum(is.na(tpkml)) #0
class(tpkml)
tpcld <- clusterLongData(traj = tpkml, timeInData = 1:13) 
save(tpcld, file = "../Data/tpcld.Rda")
#kml(tpcld, 4, toPlot = "both") # slow kml
kml(tpcld, nbClusters = 4, parAlgo = parALGO(distance = function(x, y) 
  +    cor(x, y), saveFreq = 10)) # fast kml
#onepercentloss_wide3 <- as.data.frame(onepercentloss_wide2[-61,])
tpkml <- data.frame(tpkml)
tpkml$kmlclusters4tp <- getClusters(tpcld, nbCluster = 4, 
								asInteger = FALSE) 
# likes data.frame class
#View(tpkml)

tp <- gather(tpkml, visit, score, -kmlclusters4tp)
1 -> tp$visit[tp$visit == "X1"]
2 -> tp$visit[tp$visit == "X2"]
3 -> tp$visit[tp$visit == "X3"]
4 -> tp$visit[tp$visit == "X4"]
5 -> tp$visit[tp$visit == "X5"]
6 -> tp$visit[tp$visit == "X6"]
7 -> tp$visit[tp$visit == "X7"]
8 -> tp$visit[tp$visit == "X8"]
9 -> tp$visit[tp$visit == "X9"]
10 -> tp$visit[tp$visit == "X10"]
11 -> tp$visit[tp$visit == "X11"]
12 -> tp$visit[tp$visit == "X12"]
13 -> tp$visit[tp$visit == "X13"]
tp$visit <- factor(tp$visit, levels = c("1", "2", "3", 
		"4", "5", "6", "7", "8",
   "9", "10","11", "12","13"),
									 ordered = TRUE)
# save df
save(tp, file = "../Data/tp.Rda")

# sample size
tp %>%
  tabyl(kmlclusters4tp) %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> tpkml4counts
colnames(tpkml4counts) <- c("kml clusters", "n", "(%)")
save(tpkml4counts, file = "../Data/tpkml4counts.Rda")

# plot
a = paste( "A", " (", tpkml4counts$n[1], ")", sep = "")
b = paste( "B", " (", tpkml4counts$n[2], ")", sep = "")
c = paste( "C", " (", tpkml4counts$n[3], ")", sep = "")
d = paste( "D", " (", tpkml4counts$n[4], ")", sep = "")

ggplot(tp, aes(x = visit, y = score,
               group = kmlclusters4tp, colour = kmlclusters4tp)) +
  geom_smooth(method = "loess") +
  scale_colour_discrete(name = "% loss", breaks = c("A", "B", "C", "D"),
                        labels=c(a, b, c, d)) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######## twenty percent loss kml #####
# twenty create wide form
# df_twentypercentloss0 <- df_twentypercentloss[,c(3, 37,28, 41, 38)]
# #df_fivepercentloss0 <- df_fivepercentloss[,c(3,40, 37,39, 41)]
#sum(is.na(df_twentypercentloss0)) #8
#dim(df_twentypercentloss0) #2091 x 5
df_twentypercentloss0$visit <-
  factor(df_twentypercentloss0$visit,
         levels = c("1", "2", "3", "4", "5", "6", "7", "8","9", "10",
                    "11", "12","13"), ordered = TRUE)

df_twentypercentloss_wide1 <-spread(
	df_twentypercentloss0, visit, meanPDheel)
twentypercentloss_wide2 <- as.matrix(df_twentypercentloss_wide1[,4:16])
#sum(is.na(twentypercentloss_wide2)) # is 2311
#sum(is.nan(twentypercentloss_wide2)) # is 8
twentypkml <- imputation(as.matrix(df_twentypercentloss_wide1[,4:16]), 
												 "trajMean")
#View(twentypkml)
#sum(is.na(twentypkml)) #0
twentypcld <- cld(traj = twentypkml, timeInData = 1:13)
save(twentypcld, file = "../Data/tpcld.Rda")
#kml(twentypcld, 4, toPlot = "both") # slow kml
kml(twentypcld, 4, parAlgo = parALGO(distance = function(x, y) #fast kml
  +    cor(x, y), saveFreq = 10)) # fast kml
twentypkml <- data.frame(twentypkml)
twentypkml$kmlclusters4twentyp <- getClusters(
	twentypcld, nbCluster = 4, asInteger = FALSE)
#View(twentypkml)
#twentypkml <- data.frame(twentypkml)
twentyp <- gather(twentypkml, visit, score, -kmlclusters4twentyp)
1 -> twentyp$visit[twentyp$visit == "X1"]
2 -> twentyp$visit[twentyp$visit == "X2"]
3 -> twentyp$visit[twentyp$visit == "X3"]
4 -> twentyp$visit[twentyp$visit == "X4"]
5 -> twentyp$visit[twentyp$visit == "X5"]
6 -> twentyp$visit[twentyp$visit == "X6"]
7 -> twentyp$visit[twentyp$visit == "X7"]
8 -> twentyp$visit[twentyp$visit == "X8"]
9 -> twentyp$visit[twentyp$visit == "X9"]
10 -> twentyp$visit[twentyp$visit == "X10"]
11 -> twentyp$visit[twentyp$visit == "X11"]
12 -> twentyp$visit[twentyp$visit == "X12"]
13 -> twentyp$visit[twentyp$visit == "X13"]
twentyp$visit <- factor(twentyp$visit, 
		levels = c("1", "2", "3", "4", "5", "6", "7", 
		"8", "9", "10","11", "12","13"), 
				ordered = TRUE)
twentyp$score <- as.numeric(twentyp$score)
# save df
save(twentyp, file = "../Data/twentyp.Rda")

# sample size
twentyp %>%
  tabyl(kmlclusters4twentyp) %>%
  adorn_rounding(digits = 2) %>%
  as.data.frame() -> twentypkml4counts
colnames(twentypkml4counts) <- c("kml clusters", "n", "(%)")
save(twentypkml4counts, file = "../Data/twentypkml4counts.Rda")

# plot
a = paste( "A", " (", twentypkml4counts$n[1], ")", sep = "")
b = paste( "B", " (", twentypkml4counts$n[2], ")", sep = "")
c = paste( "C", " (", twentypkml4counts$n[3], ")", sep = "")
d = paste( "D", " (", twentypkml4counts$n[4], ")", sep = "")
ggplot(twentyp, aes(x = visit, y = score,
                    group = kmlclusters4twentyp, 
										colour = kmlclusters4twentyp)) +
  geom_smooth(method = "loess") +
  scale_colour_discrete(name = "% loss", breaks = c("A", "B", "C", "D"),
                        labels=c(a, b, c, d)) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.5, 5)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))
######## Means of scores per percentloss data set to generate mse

# table of means for lm model
df_longdf %>%
  select(kmlclusters4, visit, meanPDheel.y) %>%
  group_by_at(vars(kmlclusters4, visit)) %>%
  summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
  mutate_if(is.numeric, round, digits=1) %>%
  as.data.frame() -> zerop_means
colnames(zerop_means)[3] <-  "zp_m"
colnames(zerop_means)[4] <-  "zp_sd"

op %>%
  group_by_at(vars(kmlclusters4op, visit)) %>%
  summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
  mutate_if(is.numeric, round, digits=1) %>%
  as.data.frame() -> op_means
colnames(op_means)[3] <-  "op_m"
colnames(op_means)[4] <-  "op_sd"

fp %>%
  group_by_at(vars(kmlclusters4fp, visit)) %>%
  summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
  mutate_if(is.numeric, round, digits=1) %>%
  as.data.frame() -> fp_means
colnames(fp_means)[3] <-  "fp_m"
colnames(fp_means)[4] <-  "fp_sd"

tp %>%
  group_by_at(vars(kmlclusters4tp, visit)) %>%
  summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
  mutate_if(is.numeric, round, digits=1) %>%
  as.data.frame() -> tp_means
colnames(tp_means)[3] <-  "tp_m"
colnames(tp_means)[4] <-  "tp_sd"

twentyp %>%
  group_by_at(vars(kmlclusters4twentyp, visit)) %>%
  summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
  mutate_if(is.numeric, round, digits=1) %>%
  as.data.frame() -> twentyp_means
colnames(twentyp_means)[3] <-  "twentyp_m"
colnames(twentyp_means)[4] <-  "twentyp_sd"

######## lm models and their residuals for loss of data #####
zeropmod = lm(zp_m ~ visit + kmlclusters4, data = zerop_means)
plot(zeropmod)
mean(zeropmod$residuals^2) # [1]  0.02424556

fpmod = lm(fp_m ~ visit + kmlclusters4fp, data = fp_means)
plot(fpmod)
mean(fpmod$residuals^2) # [1] 0.005465976

tpmod = lm(tp_m ~ visit + kmlclusters4tp, data = tp_means)
plot(tpmod)
mean(tpmod$residuals^2) # [1] 0.004252959

twentypmod = lm(twentyp_m ~ visit + 
									kmlclusters4twentyp, data = twentyp_means)
plot(tpmod)
mean(tpmod$residuals^2) # [1] 0.004252959

######### Score trajectory for percent loss and no loss #####

load("../Data/op.Rda")
load("../Data/fp.Rda")
load("../Data/tp.Rda")
load("../Data/twentyp.Rda")

op_long <- gather(op, kmlclusters4op, value, -score, -visit)
fp_long <- gather(fp, kmlclusters4fp, value, -score, -visit)
tp_long <- gather(tp, kmlclusters4tp, value, -score, -visit)
twentyp_long <- gather(twentyp, kmlclusters4twentyp, value, -score, -visit)

# reshape data
# for data frame op

op_long$loss <- rep("one percent loss", dim(op_long)[1])
op_long <- op_long[, -3]
head(op_long)

# for data frame fp
fp_long$loss <- rep("five percent loss", dim(fp_long)[1])
fp_long <- fp_long[, -3]
head(fp_long)

# for data frame tp
tp_long$loss <- rep("ten percent loss", dim(tp_long)[1])
tp_long <- tp_long[, -3]
head(tp_long)

# for data frame twentyp
twentyp_long$loss <- rep("twenty percent loss", dim(twentyp_long)[1])
twentyp_long <- twentyp_long[, -3]
head(twentyp_long)

#for data frame no loss

no_loss <- df_longdf[,c(28, 46, 45)]
no_loss$loss <- rep("zero percent loss", dim(df_longdf)[1])
colnames(no_loss) <- c("visit", "score", "value", "loss")

loss_long <- rbind(op_long, fp_long, tp_long, twentyp_long, no_loss)
loss_long$loss <- 
	factor(loss_long$loss, c("zero percent loss", "one percent loss",
	"five percent loss", 
"ten percent loss", "twenty percent loss"),
				 ordered = TRUE)
save(loss_long, file = "../Data/loss_long.Rda")

######## Score in Loss plots #####
a = paste( "0 %", " (", tab_loss$A[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss$A[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss$A[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss$A[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss$A[5], ")", sep = "")
# loss plot for kml cluster A
ggplot(loss_long[loss_long$value == "A",], 
			 aes(x = visit, y = as.numeric(score), group = loss,
                      colour = loss)) +
  geom_smooth(method = "loess", se = FALSE) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  scale_colour_discrete(name = "% loss (n)",
                        labels = c(a,b,c,d, e)) +
  labs(y = "score") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.7, 4)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

# loss plot for kml cluster B
a = paste( "0 %", " (", tab_loss$B[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss$B[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss$B[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss$B[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss$B[5], ")", sep = "")
ggplot(loss_long[loss_long$value == "B",], 
			 aes(x = visit, y = as.numeric(score), group = loss,
                                               colour = loss)) +
  geom_smooth(method = "loess", se = FALSE) +
  scale_colour_discrete(name = "% loss (n)",
                        labels = c(a,b,c,d,e)) +
  labs(y = "score") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  expand_limits(x=c(1,13), y=c(3.7, 4)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

# loss plot for kml cluster C
a = paste( "0 %", " (", tab_loss$C[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss$C[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss$C[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss$C[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss$C[5], ")", sep = "")
ggplot(loss_long[loss_long$value == "C",], 
			 aes(x = visit, y = as.numeric(score), group = loss,
                                               colour = loss)) +
  geom_smooth(method = "loess", se = FALSE) +
  scale_colour_discrete(name = "% loss (n)",
                        labels = c(a,b,c,d,e)) +
  labs(y = "score") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

# loss plot for kml cluster D
a = paste( "0 %", " (", tab_loss$D[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss$D[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss$D[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss$D[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss$D[5], ")", sep = "")
ggplot(loss_long[loss_long$value == "D",], 
			 aes(x = visit, y = as.numeric(score), group = loss,
                                               colour = loss)) +
  geom_smooth(method = "loess", se = FALSE) +
  scale_colour_discrete(name = "% loss (n)",
                        labels = c(a,b,c,d,e)) +
  labs(y = "score") +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

### end of loss plots and loss ###
@

\setkeys{Gin}{width = 0.6\textwidth}
<<Rcode3, echo = TRUE, eval = FALSE, self.contained = TRUE, size = "tiny">>=
####### simulation on loss of data #####

set.seed(1964) # Michelle Obama's birth year
obs <- dim(df_longdf)[1]
percentloss <- c(0.01, 0.05, 0.10, 0.20)
sizeofloss <- round(obs*percentloss, 0)
sizeofloss

# remove "percentloss" % of random rows of data
onepercentloss <- sample(1:obs, sizeofloss[1], replace = FALSE)
fivepercentloss <- sample(1:obs, sizeofloss[2], replace = FALSE)
tenpercentloss <- sample(1:obs, sizeofloss[3], replace = FALSE)
twentypercentloss <- sample(1:obs, sizeofloss[4], replace = FALSE)
#class(onepercentloss)

# remove 1% of random rows
df_onepercentloss0 <- df_longdf[-onepercentloss,]
#dim(df_onepercentloss0) #4446 x 47, 1% of data loss

# remove 5% of random rows
df_fivepercentloss0 <- df_longdf[-fivepercentloss,]
#dim(df_fivepercentloss0) #4341 x 47, 5% of data loss

# remove 10% of random rows
df_tenpercentloss0 <- df_longdf[-tenpercentloss,]
#dim(df_tenpercentloss0) #4211 x 47, 10% of data loss

# remove 20% of random rows
df_twentypercentloss0 <- df_longdf[-twentypercentloss,]
#dim(df_twentypercentloss0) #3950 x 47, 20% of data loss

save(df_onepercentloss0, file = "../Data/df_onepercentloss0.Rda")
save(df_onepercentloss0, file = "../Data/df_fivepercentloss0.Rda")
save(df_onepercentloss0, file = "../Data/df_tenpercentloss0.Rda")
save(df_onepercentloss0, file = "../Data/df_twentypercentloss0.Rda")


####### Random losses of data (as stipulated above) #####

df_onepercentloss0 %>%
	tabyl(kmlclusters4) %>%
	adorn_rounding(digits = 2) %>%
	as.data.frame() %>%
	adorn_totals()-> opkml4counts0
colnames(opkml4counts0) <- c("kml clusters", "n", "(%)")
save(opkml4counts0, file = "../Data/opkml4counts0.Rda")

a = paste( "A", " (", opkml4counts0$n[1], ")", sep = "")
b = paste( "B", " (", opkml4counts0$n[2], ")", sep = "")
c = paste( "C", " (", opkml4counts0$n[3], ")", sep = "")
d = paste( "D", " (", opkml4counts0$n[4], ")", sep = "")
ggplot(df_onepercentloss0, aes(x = visit, y = meanPDheel.y,
                               group = kmlclusters4, colour = kmlclusters4)) +
	geom_smooth(method = "loess") +
	scale_colour_discrete(name = "% loss" (n), breaks = c("A", "B", "C", "D"),
												labels = c(a, b, c, d)) +
	geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted")  +
	labs( y = "score") +
	theme(legend.position = "bottom") +
	expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
	scale_x_discrete(name = "visit",
									 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######### five percent loss kml #####

# sample size
df_fivepercentloss0 %>%
	tabyl(kmlclusters4) %>%
	adorn_rounding(digits = 2) %>%
	as.data.frame() %>%
	adorn_totals() -> fpkml4counts0
colnames(fpkml4counts0) <- c("kml clusters", "n", "(%)")
save(fpkml4counts0, file = "../Data/fpkml4counts0.Rda")

# plot
a = paste( "A", " (", fpkml4counts0$n[1], ")", sep = "")
b = paste( "B", " (", fpkml4counts0$n[2], ")", sep = "")
c = paste( "C", " (", fpkml4counts0$n[3], ")", sep = "")
d = paste( "D", " (", fpkml4counts0$n[4], ")", sep = "")

ggplot(df_fivepercentloss0, aes(x = visit, y = meanPDheel.y,
                                group = kmlclusters4, colour = kmlclusters4)) +
	geom_smooth(method = "loess") +
	scale_colour_discrete(name = "Four partitions (n)", 
												breaks = c("A", "B", "C", "D"),
												labels=c(a, b, c, d)) +
  labs( y = "Score") +
	geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
	theme(legend.position = "bottom",
	      axis.title = element_text(size = 12),
	      legend.title = element_text(size = 8),
	      legend.text = element_text(size = 8)) +
	expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
	scale_x_discrete(name = "Visit",
									 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######## ten percent loss kml #####

# sample size
df_tenpercentloss0 %>%
	tabyl(kmlclusters4) %>%
	adorn_rounding(digits = 2) %>%
	as.data.frame() %>%
	adorn_totals()-> tpkml4counts0
colnames(tpkml4counts0) <- c("kml clusters", "n", "(%)")
save(tpkml4counts0, file = "../Data/tpkml4counts0.Rda")

# plot
a = paste( "A", " (", tpkml4counts0$n[1], ")", sep = "")
b = paste( "B", " (", tpkml4counts0$n[2], ")", sep = "")
c = paste( "C", " (", tpkml4counts0$n[3], ")", sep = "")
d = paste( "D", " (", tpkml4counts0$n[4], ")", sep = "")
ggplot(df_tenpercentloss0, aes(x = visit, y = meanPDheel.y,

                               group = kmlclusters4, colour = kmlclusters4)) +
	geom_smooth(method = "loess") +
	scale_colour_discrete(name = "Four partitions (n)", 
												breaks = c("A", "B", "C", "D"),
												labels=c(a, b, c, d)) +
  labs(y = "Score") +
	geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
	theme(legend.position = "bottom",
	      axis.title = element_text(size = 12),
	      legend.title = element_text(size = 8),
	      legend.text = element_text(size = 8)) +
	expand_limits(x=c(1,13), y=c(3.5, 5.5)) +
	scale_x_discrete(name = "Visit",
									 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######## twenty percent loss kml #####

# sample size
df_twentypercentloss0 %>%
	tabyl(kmlclusters4) %>%
	adorn_rounding(digits = 2) %>%
	as.data.frame() -> twentypkml4counts0
colnames(twentypkml4counts0) <- c("kml clusters", "n", "(%)")
save(twentypkml4counts0, file = "../Data/twentypkml4counts0.Rda")

# plot
a = paste( "A", " (", twentypkml4counts0$n[1], ")", sep = "")
b = paste( "B", " (", twentypkml4counts0$n[2], ")", sep = "")
c = paste( "C", " (", twentypkml4counts0$n[3], ")", sep = "")
d = paste( "D", " (", twentypkml4counts0$n[4], ")", sep = "")
ggplot(df_twentypercentloss0, aes(x = visit, y = meanPDheel.y,
                                  group = kmlclusters4, colour = kmlclusters4)) +
	geom_smooth(method = "loess") +
	scale_colour_discrete(name = "Four partitions (n)", 
												breaks = c("A", "B", "C", "D"),
												labels=c(a, b, c, d)) +
	geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
	theme(legend.position = "bottom",
	      axis.title = element_text(size = 12),
	      legend.title = element_text(size = 8),
	      legend.text = element_text(size = 8)) +
  labs(y = "Score") +
	expand_limits(x=c(1,13), y=c(3.5, 5)) +
	scale_x_discrete(name = "Visit",
									 limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

######## Means of scores per percentloss data set

# table of means for lm model
df_longdf %>%
	select(kmlclusters4, visit, meanPDheel.y) %>%
	group_by_at(vars(kmlclusters4, visit)) %>%
	summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
	mutate_if(is.numeric, round, digits=1) %>%
	as.data.frame() -> zerop_means0
colnames(zerop_means0)[3] <-  "zp_m"
colnames(zerop_means0)[4] <-  "zp_sd"

df_onepercentloss0 %>%
	group_by_at(vars(kmlclusters4, visit)) %>%
	summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
	mutate_if(is.numeric, round, digits=1) %>%
	as.data.frame() -> op_means0
colnames(op_means0)[17] <-  "op_m"
colnames(op_means0)[37] <-  "op_sd"

df_fivepercentloss0 %>%
	group_by_at(vars(kmlclusters4, visit)) %>%
	summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
	mutate_if(is.numeric, round, digits=1) %>%
	as.data.frame() -> fp_means0
colnames(fp_means0)[17] <-  "fp_m"
colnames(fp_means0)[37] <-  "fp_sd"

df_tenpercentloss0 %>%
	group_by_at(vars(kmlclusters4, visit)) %>%
	summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
	mutate_if(is.numeric, round, digits=1) %>%
	as.data.frame() -> tp_means0
colnames(tp_means0)[17] <-  "tp_m"
colnames(tp_means0)[37] <-  "tp_sd"

df_twentypercentloss0 %>%
	group_by_at(vars(kmlclusters4, visit)) %>%
	summarise_if(is.numeric, c(mean, sd), na.rm=TRUE) %>%
	mutate_if(is.numeric, round, digits=1) %>%
	as.data.frame() -> twentyp_means0
colnames(twentyp_means0)[3] <-  "twentyp_m"
colnames(twentyp_means0)[4] <-  "twentyp_sd"


######## lm models and their residuals for loss of data #####
zeropmod0 = lm(zp_m ~ visit + kmlclusters4, data = zerop_means)
plot(zeropmod0)
mean(zeropmod0$residuals^2) # [1]  0.02424556

fpmod0 = lm(fp_m ~ visit + kmlclusters4, data = fp_means0)
plot(fpmod0)
mean(fpmod$residuals0^2) # [1] 0.005465976 (old) vs 0.005465976

tpmod0 = lm(tp_m ~ visit + kmlclusters4, data = tp_means0)
plot(tpmod0)
mean(tpmod$residuals^2) # [1] 0.004252959 vs 28.50422

twentypmod0 = lm(twentyp_m ~ visit + kmlclusters4, data = twentyp_means0)
plot(tpmod0)
mean(tpmod$residuals^2) # [1] 0.004252959 (old) vs 28.50422

####### zeroer 0% loss #####


full_join(df_longdf, zerop_means0,
          by = c("visit" = "visit",
                 "kmlclusters4" = "kmlclusters4"), copy = FALSE) -> zeroer0
zeroer0$mse_zp0 <- ((zeroer0$meanPDheel.x - zeroer0$zp_m)^2) / dim(zeroer)[1]
zeroer0$variable0 <- rep("0 %", dim(zeroer)[1])
# gather zeroer
names(zeroer0)
zeroer0 <- zeroer0[c(46, 28, 47, 48, 49, 50, 51)]
names(zeroer0)
#zero0 <- zero0[,c( 46, 28, 38, 62, 82, 88, 89)]

######## loner 1 % loss #####
full_join(df_onepercentloss0, op_means0,
          by = c("visit" = "visit", 
          			 "kmlclusters4" = "kmlclusters4"), copy = FALSE) -> loner0
dim(loner0)
loner0$mse_op0 <- ((loner0$meanPDheel.y - loner0$op_m)^2) / dim(loner0)[1]
loner0$variable0 <- rep("1 %", dim(loner0)[1])
loner0 <- loner0[,c( 46, 28, 38, 62, 82, 88, 89)]

######### fiver 5 % loss #####
full_join(df_fivepercentloss0, fp_means0,
          by = c("visit" = "visit",
                 "kmlclusters4" = "kmlclusters4"), copy = FALSE) -> fiver0
dim(fiver0)
fiver0$mse_fp0 <- ((fiver0$meanPDheel.y - fiver0$fp_m)^2) / dim(fiver0)[1]
#View(fiver0)
fiver0$variable0 <- rep("5 %", dim(fiver0)[1])
names(fiver0)
fiver0 <- fiver0[,c( 46, 28, 38, 62, 82, 88, 89)]

######### tenner 10 % loss#####
full_join(df_tenpercentloss0, tp_means0,
          by = c("visit" = "visit",
                 "kmlclusters4" = "kmlclusters4"), copy = FALSE) -> tenner0
dim(tenner0)
tenner0$mse_tp0 <- ((tenner0$meanPDheel.x - tenner0$tp_m)^2) / dim(tenner0)[1]
tenner0$variable0 <- rep("10 %", dim(tenner0)[1])
#View(tenner)
names(tenner0)
tenner0 <- tenner0[,c( 46, 28, 38, 62, 82, 88, 89)]
names(tenner0)
#c("kml clusters", "visit", "score",
"mean per loss", "sd per loss", "mse per loss", "variable")

######### twentier 20 % loss #####

full_join(df_twentypercentloss0, twentyp_means0,
          by = c("visit" = "visit",
                 "kmlclusters4" = "kmlclusters4"), copy = FALSE) -> twentier0
dim(twentier0)
twentier0$mse_twenty0 <-
  ((twentier0$meanPDheel.y - twentier0$twentyp_m)^2) / dim(twentier0)[1]
twentier0$variable0 <- rep("20 %", dim(twentier0)[1])
#View(twentier0)
names(twentier0)
twentier0 <- twentier0[,c( 46, 28, 38, 48, 49, 88, 89)]

######## rbind

colnames(zeroer0) <- c("kml clusters",
                       "visit", "score", "mean per loss", 
											 "sd per loss", "mse per loss", "variable")

colnames(loner0) <- c("kml clusters",
                      "visit", "score", "mean per loss", 
											"sd per loss", "mse per loss", "variable")

colnames(fiver0) <- c("kml clusters",
                      "visit", "score", "mean per loss", 
											"sd per loss", "mse per loss", "variable")

colnames(tenner0) <- c("kml clusters",
                       "visit", "score", "mean per loss", 
											 "sd per loss", "mse per loss", "variable")

colnames(twentier0) <- c("kml clusters",
                         "visit", "score", "mean per loss", 
												 "sd per loss", "mse per loss", "variable")

names(zeroer0)
dim(zeroer0)
names(loner0)
dim(loner0)
names(fiver0)
names(tenner0)
names(twentier0)

er_long0 <- data.frame(rbind(loner0, zeroer0, fiver0, tenner0, twentier0))

#er_long0 <- na.omit(er_long0)
save(er_long0, file = "../Data/er_long0.Rda")

er_long0 %>%
  tabyl(variable, kml.clusters) %>%
  as.data.frame() %>%
  adorn_totals(where = "col")-> tab_loss0
tab_loss0
tab_loss0 <- tab_loss0[-6, ]
save(tab_loss0, file = "../Data/tab_loss0.Rda")

######### Score trajectory for percent loss and no loss #####

load("../Data/op.Rda")
load("../Data/fp.Rda")
load("../Data/tp.Rda")
load("../Data/twentyp.Rda")

op_long <- gather(op, kmlclusters4op, value, -score, -visit)
fp_long <- gather(fp, kmlclusters4fp, value, -score, -visit)
tp_long <- gather(tp, kmlclusters4tp, value, -score, -visit)
twentyp_long <- gather(twentyp, kmlclusters4twentyp, value, -score, -visit)

# reshape data
# for data frame op

df_onepercentloss0$loss <- rep("1 % loss", dim(df_onepercentloss0)[1])
#head(df_onepercentloss0)

# for data frame fp
df_fivepercentloss0$loss <- rep("5 % loss", dim(df_fivepercentloss0)[1])
#head(df_fivepercentloss0)

# for data frame tp
df_tenpercentloss0$loss <- rep("10 % loss", dim(df_tenpercentloss0)[1])
#head(df_tenpercentloss0)

# for data frame twentyp
df_twentypercentloss0$loss <- rep("20 % loss", dim(df_twentypercentloss0)[1])
#head(df_twentypercentloss0)


# long form
loss_long0 <- data.frame(rbind(df_longdf, df_onepercentloss0, df_fivepercentloss0,
                               df_tenpercentloss0, df_twentypercentloss0))


loss_long0$loss <- factor(loss_long0$loss, c("0 % loss", "1 % loss",
																					 "5 % loss", "10 % loss",
																					 "20 % loss"), order = TRUE)

save(loss_long0, file = "../Data/loss_long0.Rda")

######## Score in Loss plots #####

# loss plot for kml cluster A
a = paste( "0 %", " (", tab_loss0$A[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss0$A[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss0$A[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss0$A[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss0$A[5], ")", sep = "")
ggplot(er_long0[er_long0$kml.clusters == "A",],
       aes(x = visit, y = score, group = variable, colour = variable)) +
  geom_smooth(method = "loess", se = FALSE) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  scale_colour_discrete(name = "% loss (n)", labels = c(a,b,c,d, e)) +
  theme(legend.position = "bottom")

# loss plot for kml cluster B
a = paste( "0 %", " (", tab_loss0$B[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss0$B[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss0$B[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss0$B[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss0$B[5], ")", sep = "")
ggplot(er_long0[er_long0$kml.clusters == "B",],
       aes(x = visit, y = score, group = variable, colour = variable)) +
  geom_smooth(method = "loess", se = FALSE) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  scale_colour_discrete(name = "% loss (n)", labels = c(a,b,c,d, e)) +
  theme(legend.position = "bottom")


# loss plot for kml cluster C
a = paste( "0 %", " (", tab_loss0$C[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss0$C[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss0$C[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss0$C[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss0$C[5], ")", sep = "")
ggplot(er_long0[er_long0$kml.clusters == "C",],
       aes(x = visit, y = score, group = variable, colour = variable)) +
  geom_smooth(method = "loess", se = FALSE) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  scale_colour_discrete(name = "% loss (n)", labels = c(a,b,c,d, e)) +
  theme(legend.position = "bottom")

# loss plot for kml cluster D

a = paste( "0 %", " (", tab_loss0$D[1], ")", sep = "")
b = paste( "1 %", " (", tab_loss0$D[2], ")", sep = "")
c = paste( "5 %", " (", tab_loss0$D[3], ")", sep = "")
d = paste( "10 %", " (", tab_loss0$D[4], ")", sep = "")
e = paste( "20 %", " (", tab_loss0$D[5], ")", sep = "")
ggplot(er_long0[er_long0$kml.clusters == "D",],
       aes(x = visit, y = score, group = variable,
                                                    colour = variable)) +
  geom_smooth(method = "loess", se = FALSE) +
  geom_vline(xintercept = c(6, 9), colour = "red", linetype = "dotted") +
  theme(legend.position = "bottom") +
  expand_limits(x=c(1,13), y=c(3.7, 4)) +
  scale_colour_discrete(name = "% loss (n)", labels = c(a,b,c,d, e)) +
  scale_x_discrete(name = "visit",
                   limits = factor(c(1,2,3,4,5,6,7,8,9,10,11,12,13)))

### end of loss plots and loss ###

@

